package com.xuecheng.search.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MultiMatchQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.xuecheng.framework.domain.course.CoursePub;
import com.xuecheng.framework.domain.search.CourseSearchParam;
import com.xuecheng.framework.model.response.CommonCode;
import com.xuecheng.framework.model.response.QueryResponseResult;
import com.xuecheng.framework.model.response.QueryResult;

@Service
public class EsCourseService {

	@Value("${xuecheng.elasticsearch.course.index}")
	private String es_index;
	@Value("${xuecheng.elasticsearch.course.type}")
	private String es_type;
	@Value("${xuecheng.elasticsearch.course.source_field}")
	private String source_field;

	@Autowired
	private RestHighLevelClient restHighLevelClient;

	// 关键字查询
	public QueryResponseResult<CoursePub> searchList(int page, int size, CourseSearchParam courseSearchParam) {
		// 设置索引
		SearchRequest searchRequest = new SearchRequest(es_index);
		// 设置类型
		searchRequest.types(es_type);

		SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
		BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
		// source源字段过滤
		String[] source_fields = source_field.split(",");
		searchSourceBuilder.fetchSource(source_fields, new String[] {});
		// 关键字
		if (StringUtils.isNotEmpty(courseSearchParam.getKeyword())) {
			// 匹配关键字
			MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders
					.multiMatchQuery(courseSearchParam.getKeyword(), "name", "teachplan", "description");
			// 设置配置占比
			multiMatchQueryBuilder.minimumShouldMatch("70%");
			// 提升课程名字段的boost值
			multiMatchQueryBuilder.field("name", 10);
			boolQueryBuilder.must(multiMatchQueryBuilder);
		}
		//根据一级分类查询
		if(StringUtils.isNotEmpty(courseSearchParam.getMt())) {
			boolQueryBuilder.filter(QueryBuilders.termQuery("mt", courseSearchParam.getMt()));
		}
		//根据二级分类查询
		if(StringUtils.isNotEmpty(courseSearchParam.getSt())) {
			boolQueryBuilder.filter(QueryBuilders.termQuery("st", courseSearchParam.getSt()));
		}
		//根据难度等级查询
		if(StringUtils.isNotEmpty(courseSearchParam.getGrade())) {
			boolQueryBuilder.filter(QueryBuilders.termQuery("grade", courseSearchParam.getGrade()));
		}
		
		// 布尔查询
		searchSourceBuilder.query(boolQueryBuilder);

		// 请求搜索
		searchRequest.source(searchSourceBuilder);

		SearchResponse searchResponse = null;
		try {
			searchResponse = restHighLevelClient.search(searchRequest);
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 结果集处理
		SearchHits hits = searchResponse.getHits();
		SearchHit[] searchHits = hits.getHits();
		// 记录总数
		long totalHits = hits.getTotalHits();
		// 数据列表
		List<CoursePub> list = new ArrayList<>();
		for (SearchHit hit : searchHits) {
			CoursePub coursePub = new CoursePub();
			// 取出source
			Map<String, Object> sourceAsMap = hit.getSourceAsMap();
			// 取出课程名
			String name = (String) sourceAsMap.get("name");
			coursePub.setName(name);
			// 图片
			String pic = (String) sourceAsMap.get("pic");
			coursePub.setPic(pic);
			// 价格
			Double price = null;
			price = (Double)sourceAsMap.get("price");
			coursePub.setPrice(price);
			// 原价
			Double price_old = null;
			price_old = (Double)sourceAsMap.get("price_old");
			coursePub.setPrice_old(price_old);
			
			list.add(coursePub);
		}
		
		QueryResult<CoursePub> queryResult = new QueryResult<>();
		queryResult.setList(list);
		queryResult.setTotal(totalHits);
		QueryResponseResult<CoursePub> queryResponseResult = new QueryResponseResult<>(CommonCode.SUCCESS, queryResult);
		
		return queryResponseResult;
	}
}
