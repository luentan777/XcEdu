package com.xuecheng.manage_cms.service;

import static org.hamcrest.CoreMatchers.nullValue;

import java.util.Map;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.xuecheng.framework.domain.cms.CmsConfig;
import com.xuecheng.framework.domain.cms.CmsPage;
import com.xuecheng.framework.domain.cms.request.QueryPageRequest;
import com.xuecheng.framework.domain.cms.response.CmsCode;
import com.xuecheng.framework.domain.cms.response.CmsPageResult;
import com.xuecheng.framework.exception.ExceptionCast;
import com.xuecheng.framework.model.response.CommonCode;
import com.xuecheng.framework.model.response.QueryResponseResult;
import com.xuecheng.framework.model.response.QueryResult;
import com.xuecheng.framework.model.response.ResponseResult;
import com.xuecheng.manage_cms.dao.CmsConfigRepository;
import com.xuecheng.manage_cms.dao.CmsPageRepository;

@Service
public class PageService {

	@Autowired
	private CmsPageRepository cmsPageRepository;
	@Autowired
	private CmsConfigRepository cmsConfigRepository;
	@Autowired
	private RestTemplate restTemplate;
	
	public QueryResponseResult findList(int page, int size, QueryPageRequest queryPageRequest) {
		if (queryPageRequest == null) {
			queryPageRequest = new QueryPageRequest();
		}

		// 自定义条件查询
		// 定义条件匹配器
		ExampleMatcher exampleMatcher = ExampleMatcher.matching().withMatcher("pageAliase",
		ExampleMatcher.GenericPropertyMatchers.contains());
		// 条件值对象
		CmsPage cmsPage = new CmsPage();
		// 设置条件值(站点id)
		if (StringUtils.isNotEmpty(queryPageRequest.getSiteId())) {
			cmsPage.setSiteId(queryPageRequest.getSiteId());
		}
		// 设置模板Id作为查询条件
		if (StringUtils.isNotEmpty(queryPageRequest.getTemplateId())) {
			cmsPage.setTemplateId(queryPageRequest.getTemplateId());
		}
		// 设置页面别名作为查询条件
		if (StringUtils.isNotEmpty(queryPageRequest.getPageAliase())) {
			cmsPage.setPageAliase(queryPageRequest.getPageAliase());
		}

		// 定义条件对象Example
		Example<CmsPage> example = Example.of(cmsPage, exampleMatcher);

		if (page <= 0) {
			page = 1;
		}
		page = page - 1;
		if (size <= 0) {
			size = 10;
		}
		Pageable pageable = PageRequest.of(page, size);
		Page<CmsPage> pageData = cmsPageRepository.findAll(example, pageable);
		QueryResult queryResult = new QueryResult<>();
		queryResult.setList(pageData.getContent());
		queryResult.setTotal(pageData.getTotalElements());
		QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS, queryResult);

		return queryResponseResult;
	}

	public CmsPageResult add(CmsPage cmsPage) {
		CmsPage temp = cmsPageRepository.findByPageNameAndSiteIdAndPageWebPath(cmsPage.getPageName(),
				cmsPage.getSiteId(), cmsPage.getPageWebPath());
		if (temp == null) {
			cmsPage.setPageId(null);
			cmsPageRepository.save(cmsPage);
			return new CmsPageResult(CommonCode.SUCCESS, cmsPage);
		}
		// 添加失败
		return new CmsPageResult(CommonCode.FAIL, null);
	}

	// 根据页面Id查询页面
	public CmsPage findById(String id) {
		Optional<CmsPage> optional = cmsPageRepository.findById(id);
		if (optional.isPresent()) {
			CmsPage cmsPage = optional.get();
			return cmsPage;
		}
		return null;
	}

	// 修改页面
	public CmsPageResult update(String id,CmsPage cmsPage) {
		//根据Id从数据查询页面信息
		CmsPage temp = findById(id);
		if(temp != null) {
			//更新模板id
			temp.setTemplateId(cmsPage.getTemplateId());
			//更新所属站点
			temp.setSiteId(cmsPage.getSiteId());
				//更新页面别名
			temp.setPageAliase(cmsPage.getPageAliase());
			//更新页面名称
			temp.setPageName(cmsPage.getPageName());
			//更新访问路径
			temp.setPageWebPath(cmsPage.getPageWebPath());
			//更新物理路径
			temp.setPagePhysicalPath(cmsPage.getPagePhysicalPath());
			//更新dataUrl
			temp.setDataUrl(cmsPage.getDataUrl());
			cmsPageRepository.save(temp);
			return new CmsPageResult(CommonCode.SUCCESS, temp);
		}
		//修改失败
		return new CmsPageResult(CommonCode.FAIL, null);
	}
	//根据id删除页面
	public ResponseResult delete(String id) {
		Optional<CmsPage> optional = cmsPageRepository.findById(id);
		if(optional.isPresent()) {
			cmsPageRepository.deleteById(id);
			return new ResponseResult(CommonCode.SUCCESS);
		}
		return new ResponseResult(CommonCode.FAIL);
	}
	
	//根据id查询CmsConfig
	public CmsConfig getConfigById(String id) {
		Optional<CmsConfig> optional = cmsConfigRepository.findById(id);
		if(optional.isPresent()) {
			CmsConfig cmsConfig = optional.get();
			return cmsConfig;
		}
		return null;
	}
	
	//页面静态化
	public String getPageHtml(String pageId) {
		//获取模型数据
		Map model = getModelByPageId(pageId);
	}
	
	//获取数据模型
	private Map getModelByPageId(String pageId) {
		//取出页面信息
		CmsPage cmsPage = findById(pageId);
		if(cmsPage == null) {
			ExceptionCast.cast(CmsCode.CMS_PAGE_NOEXISTS);
		}
		//取出页面的dataUrl
		String dataUrl = cmsPage.getDataUrl();
		if(StringUtils.isEmpty(dataUrl)) {
			//页面dataUrl为空
			ExceptionCast.cast(CmsCode.CMS_GENERATEHTML_DATAURLISNULL);
		}
		//通过restTemplate请求dataUrl获取数据
		ResponseEntity<Map> forEntity = restTemplate.getForEntity(dataUrl, Map.class);
		Map body = forEntity.getBody();
		return body;
	}
}
